-------------
Patterns objective:

1- Be easy to modify or add effects (example: increase speed, change colors, etc)
2- Be easy to combine
3- Possible to save to a json file and load from json files.




-----------
 
For 1, Ideally a pattern shouldn't have a internal state. This allow for better composing using functions. 
For example, instead of having an internal frame counter, it could receive a frame variable. So a 
function that converts "milibeats" to frames, could sinc that pattern to the rythm of the song.

Of course this is not always possible because of performance (frame N might depend on frame N-1, 
such as in game of life). Therefore this is just a guideline to make it easier to compose patterns together. 

-----------
There are basically two options of how to make the patterns: they can be functions or they can be objects.

If they are objects, they have the advantage of having internal states that can change in each update for each frame. 
This is how 1e does it, as seen on : https://github.com/FirstEast/1e-Disco/blob/master/server/pattern/pattern.py.

If they are functions they should be easier to compose; however, in order to have an internal state, one needs to 
use closure, which can add a lot of complexity to the code. 



The patterns are largely based on the ones used by 1e: https://github.com/FirstEast/1e-Disco/blob/master/server/pattern/pattern.py

It is intended that they should be saved and loaded from files, as 1e does: https://github.com/FirstEast/1e-Disco/blob/master/server/pattern/importer.py

